# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv

if len(argv) > 1:
    file_path, time, rate, prise = argv
    time = int(time)
    rate = int(rate)
    prise = int(prise)
    print((time * rate) + prise)
else:
    time = int(input("Enter work time: "))
    rate = int(input("Enter rate: "))
    prise = int(input("Enter price: "))
    print((time * rate) + prise)



# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

list_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [list_2[i] for i in range(1, len(list_2)) if list_2[i - 1] < list_2[i]]
print("Start List: " + str(list_2))
print("New List: " + str(new_list))



# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print(
    [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно
# использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
init_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in init_list if init_list.count(i) == 1]
print(new_list)



# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
from functools import reduce
new_list = [i for i in range(100,1000) if i % 2 == 0]
res = reduce((lambda x, y: x * y), new_list)
print(res)




# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть
# бесконечным. Необходимо предусмотреть условие его завершения.

# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также
# необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
from itertools import cycle, count

init_value = int(input('Initial: '))
fin_value = init_value * 2 + 10 + 1

# first
for i in count(init_value):
    if i < fin_value:
        print(i)
    else:
        break
del i

# second
my_list = [i for i in range(fin_value)]
count = 0
for b in cycle(my_list):
    if count < fin_value + 10:
        print(b)
        count += 1
    else:
        break


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
# должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает
# за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def fib_generation():
    for el in count():
        yield factorial(el)

n = int(input("Enter number of iterations"))
counter = 0
for i in fib_generation():
    if counter >= n:
        break
    print(i)
    counter += 1
